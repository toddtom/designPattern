适配器模式：
将一个类的接口转换成客户希望的另外一个接口，适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

模式功能：
适配器模式的主要功能是进行转换匹配，目的是复用已有的功能，而不是实现新的接口。

Adaptee,Target的关系：
适配器模式中被适配的接口Adaptee和适配成为的接口Target是没有关联的，也就是说两者的方法可以相同，也可以不同。

对象适配器和类适配器：
对象适配器的实现：依赖于对象的组合。
类适配器的实现：采用多重继承对一个接口与另一个接口进行匹配。由于Java不支持多重继承，所以目前并未涉及。
类适配器和对象适配器的权衡：
从实现上来说：类适配器 使用对象继承的方式，是静态的定义方式，而对象适配器使用对象组合的方式，是动态组合的方式。
对于类适配器，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，当
适配器继承了Adaptee后，就不能再去处理Adaptee的子类。
对于对象适配器，允许一个Adapter和多个Adaptee，包括Adaptee和它所有的子类一起工作。因为对象适配器采用的是对象组合的关系，
只要对象类型正确，是不是子类都无所谓。
对于类适配器，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。
对于对象适配器，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。
对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。
对于对象适配器，需要额外的引用来间接得到Adaptee。

适配器模式的本质：转换匹配，复用功能。